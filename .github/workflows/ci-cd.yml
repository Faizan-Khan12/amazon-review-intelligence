name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # ============================================
  # BACKEND JOBS
  # ============================================
  
  backend-lint-test:
    name: Backend - Lint & Test
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'backend/') || github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: 📦 Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt --break-system-packages
          echo "✅ Dependencies installed successfully"

      - name: 🔍 Verify no duplicate dependencies
        working-directory: ./backend
        run: |
          echo "Checking for duplicate apify-client entries..."
          APIFY_COUNT=$(grep -c "^apify-client==" requirements.txt || echo "0")
          if [ "$APIFY_COUNT" -eq "1" ]; then
            echo "✅ Only one apify-client version found (correct!)"
          elif [ "$APIFY_COUNT" -eq "0" ]; then
            echo "⚠️ WARNING: No apify-client found"
          else
            echo "❌ ERROR: Multiple apify-client versions found ($APIFY_COUNT)"
            grep "^apify-client==" requirements.txt
            exit 1
          fi

      - name: 🎨 Lint with flake8
        working-directory: ./backend
        run: |
          pip install flake8
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        continue-on-error: true

  # ============================================
  # FRONTEND JOBS
  # ============================================
  
  frontend-lint-typecheck:
    name: Frontend - Lint & Type Check
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'frontend/') || github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./frontend
        run: |
          echo "🧹 Cleaning up old dependencies..."
          rm -rf node_modules package-lock.json
          echo "📥 Installing fresh dependencies..."
          npm install
          echo "✅ Dependencies installed successfully"

      - name: 🔍 Verify no apify-client
        working-directory: ./frontend
        run: |
          if grep -q "apify-client" package.json; then
            echo "❌ ERROR: apify-client found in frontend package.json"
            echo "apify-client should only be in backend!"
            exit 1
          fi
          echo "✅ No apify-client dependency found in frontend (correct!)"

      - name: 🎨 Run ESLint
        working-directory: ./frontend
        run: npm run lint
        continue-on-error: true

      - name: 📝 TypeScript type check
        working-directory: ./frontend
        run: npm run type-check

  frontend-build:
    name: Frontend - Build
    runs-on: ubuntu-latest
    needs: frontend-lint-typecheck
    if: contains(github.event.head_commit.modified, 'frontend/') || github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ./frontend
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: 🏗️ Build Next.js app
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL || 'http://localhost:8000' }}
        run: |
          echo "🏗️ Building production bundle..."
          npm run build
          echo "✅ Build completed successfully"

      - name: 📊 Bundle size analysis
        working-directory: ./frontend
        run: |
          echo "📦 Bundle size:"
          du -sh .next/ 2>/dev/null || echo "Build folder size: N/A"

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4  # ✅ FIXED: Updated to v4
        with:
          name: frontend-build
          path: frontend/.next/
          retention-days: 7
          compression-level: 6

  # ============================================
  # DEPLOYMENT JOBS
  # ============================================
  
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: backend-lint-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Render
        env:
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        run: |
          if [ -n "$RENDER_DEPLOY_HOOK_URL" ]; then
            echo "🚀 Triggering Render deployment..."
            curl -X POST "$RENDER_DEPLOY_HOOK_URL"
            echo "✅ Backend deployment triggered"
          else
            echo "⚠️ RENDER_DEPLOY_HOOK_URL not set"
            echo "💡 Add it to GitHub Secrets to enable auto-deployment"
          fi

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: frontend-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod'
        if: ${{ secrets.VERCEL_TOKEN != '' }}

      - name: ⚠️ Vercel not configured
        if: ${{ secrets.VERCEL_TOKEN == '' }}
        run: |
          echo "⚠️ Vercel secrets not configured"
          echo "💡 Add VERCEL_TOKEN, VERCEL_ORG_ID, and VERCEL_PROJECT_ID to GitHub Secrets"

  # ============================================
  # PREVIEW DEPLOYMENT (Pull Requests)
  # ============================================
  
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [frontend-build]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy Preview to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
        if: ${{ secrets.VERCEL_TOKEN != '' }}

      - name: 💬 Comment preview URL
        uses: actions/github-script@v7
        if: ${{ secrets.VERCEL_TOKEN != '' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 Preview deployment ready! Check the deployment URL above.'
            })

  # ============================================
  # NOTIFICATION JOB
  # ============================================
  
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [backend-lint-test, frontend-build, deploy-backend, deploy-frontend]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: ✅ Success notification
        if: ${{ needs.backend-lint-test.result == 'success' && needs.frontend-build.result == 'success' }}
        run: |
          echo "🎉 All CI/CD jobs completed successfully!"
          echo ""
          echo "✅ Backend: Lint & Test - Passed"
          echo "✅ Frontend: Lint, Type Check & Build - Passed"
          echo "✅ Backend Deployment: ${{ needs.deploy-backend.result }}"
          echo "✅ Frontend Deployment: ${{ needs.deploy-frontend.result }}"

      - name: ❌ Failure notification
        if: ${{ needs.backend-lint-test.result == 'failure' || needs.frontend-build.result == 'failure' }}
        run: |
          echo "## 🎉 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Build**: ${{ needs.backend-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Build**: ${{ needs.frontend-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 Pipeline completed successfully!" >> $GITHUB_STEP_SUMMARY
