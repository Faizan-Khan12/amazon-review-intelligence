name: CI/CD Pipeline - Amazon Review Intelligence

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  BACKEND_PATH: ./backend
  FRONTEND_PATH: ./frontend

jobs:
  # ============================================
  # Backend Testing & Quality Checks
  # ============================================
  backend-test:
    name: Backend Tests & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ${{ env.BACKEND_PATH }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio black flake8 mypy

      - name: Download NLTK data
        run: |
          python -m nltk.downloader punkt stopwords vader_lexicon averaged_perceptron_tagger

      - name: Run Black formatter check
        working-directory: ${{ env.BACKEND_PATH }}
        run: black --check .

      - name: Run Flake8 linter
        working-directory: ${{ env.BACKEND_PATH }}
        run: flake8 . --max-line-length=100 --exclude=venv,__pycache__

      - name: Run MyPy type checking
        working-directory: ${{ env.BACKEND_PATH }}
        run: mypy app --ignore-missing-imports

      - name: Run pytest with coverage
        working-directory: ${{ env.BACKEND_PATH }}
        env:
          APIFY_API_TOKEN: ${{ secrets.APIFY_API_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          pytest tests/ --cov=app --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # ============================================
  # Frontend Testing & Quality Checks
  # ============================================
  frontend-test:
    name: Frontend Tests & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_PATH }}
        run: npm ci

      - name: Run ESLint
        working-directory: ${{ env.FRONTEND_PATH }}
        run: npm run lint

      - name: Run TypeScript type checking
        working-directory: ${{ env.FRONTEND_PATH }}
        run: npx tsc --noEmit

      - name: Run tests
        working-directory: ${{ env.FRONTEND_PATH }}
        run: npm test -- --coverage --watchAll=false

      - name: Build frontend
        working-directory: ${{ env.FRONTEND_PATH }}
        run: npm run build

  # ============================================
  # Security Scanning
  # ============================================
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Python dependency check
        working-directory: ${{ env.BACKEND_PATH }}
        run: |
          pip install safety
          safety check --json

  # ============================================
  # Build Docker Images
  # ============================================
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ari-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/ari-backend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/ari-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/ari-backend:buildcache,mode=max

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ari-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/ari-frontend:${{ github.sha }}
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.PRODUCTION_API_URL }}

  # ============================================
  # Deploy Backend to Render
  # ============================================
  deploy-backend:
    name: Deploy Backend to Render
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl --request POST \
            --url "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            --header "Authorization: Bearer ${RENDER_API_KEY}" \
            --header "Content-Type: application/json" \
            --data '{"clearCache": false}'

      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          max_attempts=10
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if curl -f "${{ secrets.PRODUCTION_API_URL }}/health"; then
              echo "Backend is healthy!"
              break
            fi
            echo "Attempt $attempt failed. Waiting..."
            sleep 15
            attempt=$((attempt + 1))
          done

  # ============================================
  # Deploy Frontend to Vercel
  # ============================================
  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./frontend

  # ============================================
  # Post-Deployment Tests
  # ============================================
  smoke-tests:
    name: Post-Deployment Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install test dependencies
        run: |
          pip install pytest requests

      - name: Run smoke tests
        env:
          API_URL: ${{ secrets.PRODUCTION_API_URL }}
          FRONTEND_URL: ${{ secrets.PRODUCTION_FRONTEND_URL }}
        run: |
          pytest tests/smoke/ -v

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '✅ Deployment successful! Backend and Frontend are live.'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ Deployment failed! Check the logs.'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ============================================
  # Create Release
  # ============================================
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        uses: conventional-changelog-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.changelog.outputs.version }}
          release_name: Release v${{ steps.changelog.outputs.version }}
          body: ${{ steps.changelog.outputs.clean_changelog }}
          draft: false
          prerelease: false