# ========================================
# Docker Compose - Amazon Review Intelligence
# Local Development & Production
# ========================================

version: '3.9'

services:
  # ========================================
  # Backend API Service
  # ========================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        TORCH_INDEX_URL: https://download.pytorch.org/whl/cpu
    container_name: review-intelligence-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Application Settings
      - DEBUG=${DEBUG:-True}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=${WORKERS:-2}
      
      # API Keys (from .env file)
      - APIFY_API_TOKEN=${APIFY_API_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      
      # Features
      - ENABLE_AI=${ENABLE_AI:-True}
      - ENABLE_EMOTIONS=${ENABLE_EMOTIONS:-True}
      - DATA_SOURCE=${DATA_SOURCE:-mock}
      
      # Analysis Settings
      - MAX_REVIEWS_PER_REQUEST=${MAX_REVIEWS_PER_REQUEST:-100}
      
      # CORS
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://127.0.0.1:3000}
      
      # Database
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./data/reviews.db}
      
      # Redis (optional)
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
    
    volumes:
      # Mount code for development hot reload
      - ./backend/app:/app/app:ro
      - ./backend/main.py:/app/main.py:ro
      
      # Persist data
      - backend-data:/app/data
      - backend-exports:/app/exports
      - backend-logs:/app/logs
    
    networks:
      - app-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    depends_on:
      redis:
        condition: service_healthy

  # ========================================
  # Redis Cache (Optional but Recommended)
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: review-intelligence-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ========================================
  # PostgreSQL Database (Optional)
  # Uncomment to use PostgreSQL instead of SQLite
  # ========================================
  # postgres:
  #   image: postgres:16-alpine
  #   container_name: review-intelligence-db
  #   restart: unless-stopped
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     - POSTGRES_USER=${POSTGRES_USER:-reviewuser}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-reviewpass}
  #     - POSTGRES_DB=${POSTGRES_DB:-reviewdb}
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-reviewuser}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

# ========================================
# Networks
# ========================================
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ========================================
# Volumes
# ========================================
volumes:
  backend-data:
    driver: local
  backend-exports:
    driver: local
  backend-logs:
    driver: local
  redis-data:
    driver: local
  # postgres-data:
  #   driver: local