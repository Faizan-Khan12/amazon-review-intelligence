# ============================================
# Docker Compose Configuration
# Amazon Review Intelligence - Production Stack
# ============================================

version: '3.9'

services:
  # ============================================
  # Redis Cache Service
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: ari-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ari-network

  # ============================================
  # PostgreSQL Database Service
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: ari-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-ari_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
      POSTGRES_DB: ${DB_NAME:-ari_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-ari_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ari-network

  # ============================================
  # FastAPI Backend Service
  # ============================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        PYTHON_VERSION: 3.11
    container_name: ari-backend
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql://${DB_USER:-ari_user}:${DB_PASSWORD:-secure_password}@postgres:5432/${DB_NAME:-ari_db}
      - REDIS_URL=redis://redis:6379/0
      - APIFY_API_TOKEN=${APIFY_API_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/exports:/app/exports
    command: >
      sh -c "
      python -m nltk.downloader punkt stopwords vader_lexicon &&
      alembic upgrade head &&
      uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ari-network

  # ============================================
  # Next.js Frontend Service
  # ============================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_VERSION: 18
        NEXT_PUBLIC_API_URL: http://backend:8000
    container_name: ari-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://backend:8000}
      - NEXT_PUBLIC_APIFY_TOKEN=${APIFY_API_TOKEN}
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ari-network

  # ============================================
  # Nginx Reverse Proxy (Optional)
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: ari-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - ari-network

  # ============================================
  # Monitoring - Prometheus (Optional)
  # ============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: ari-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - ari-network

  # ============================================
  # Monitoring - Grafana (Optional)
  # ============================================
  grafana:
    image: grafana/grafana:latest
    container_name: ari-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - ari-network

# ============================================
# Networks
# ============================================
networks:
  ari-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================
# Volumes
# ============================================
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ============================================
# Dockerfile for Backend
# ============================================
# Create this as backend/Dockerfile:
#
# FROM python:3.11-slim
# 
# WORKDIR /app
# 
# # Install system dependencies
# RUN apt-get update && apt-get install -y \
#     gcc \
#     g++ \
#     curl \
#     && rm -rf /var/lib/apt/lists/*
# 
# # Copy requirements first for better caching
# COPY requirements.txt .
# RUN pip install --no-cache-dir -r requirements.txt
# 
# # Download NLTK data
# RUN python -m nltk.downloader punkt stopwords vader_lexicon averaged_perceptron_tagger
# 
# # Copy application code
# COPY . .
# 
# # Create non-root user
# RUN useradd -m -u 1000 appuser && \
#     chown -R appuser:appuser /app
# 
# USER appuser
# 
# EXPOSE 8000
# 
# CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]

# ============================================
# Dockerfile for Frontend
# ============================================
# Create this as frontend/Dockerfile:
#
# FROM node:18-alpine AS builder
# 
# WORKDIR /app
# 
# # Copy package files
# COPY package*.json ./
# RUN npm ci --only=production
# 
# # Copy application code
# COPY . .
# 
# # Build the application
# RUN npm run build
# 
# # Production stage
# FROM node:18-alpine
# 
# WORKDIR /app
# 
# # Copy built application
# COPY --from=builder /app/.next ./.next
# COPY --from=builder /app/node_modules ./node_modules
# COPY --from=builder /app/package.json ./package.json
# COPY --from=builder /app/public ./public
# 
# # Create non-root user
# RUN addgroup -g 1001 -S nodejs && \
#     adduser -S nextjs -u 1001
# 
# USER nextjs
# 
# EXPOSE 3000
# 
# CMD ["npm", "start"]